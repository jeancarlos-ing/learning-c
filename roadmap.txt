ROADMAP FOR LEARN C
====================

ETAPA 1: Fundamentos de Hardware y Computación
- Objetivo: Comprender la arquitectura del computador y cómo C interactúa con el hardware.

Habilidades:
    - CPU, memoria, registros, buses
    - Binario, lógica digital, representación de datos
    - Pila de llamadas, acceso a memoria, interrupciones

Recursos:
    - Code: The Hidden Language of Computer Hardware and Software (Charles Petzold)
    - Structured Computer Organization (Andrew S. Tanenbaum)
    - Computer Organization and Design (David Patterson, John Hennessy)
    - CrashCourse Computer Science (YouTube, gratuito)
    - Curso gratuito: From Nand to Tetris (nand2tetris.org)
    - Simuladores: logic.ly, Digital (hneemann.de)
    - Curso gratuito: Computer Architecture (YouTube: Neso Academy)

Proyectos:
    - Simular operaciones básicas (suma, compuertas lógicas)
    - Dibujar diagramas de arquitectura de computadoras
    - Construir circuitos lógicos simples con simuladores

ETAPA 2: Programación Básica en C
- Objetivo: Aprender la sintaxis, lógica básica, compilación y depuración en C.

Habilidades:
    - Variables, tipos de datos, operadores
    - Estructuras de control: if, for, while, switch
    - Funciones, compilación, entrada/salida básica
    - Depuración básica con GDB

Recursos:
    - CS50: Introduction to Computer Science (Harvard, gratuito en edX)
    - Programming in C (Stephen Kochan)
    - The C Programming Language (Kernighan & Ritchie)
    - Head First C (Griffiths)
    - C Programming Tutorial for Beginners (YouTube: freeCodeCamp)
    - OnlineGDB, Repl.it
    - Learn-C.org (interactivo y gratuito)

Proyectos:
    - Conversor de temperatura
    - Generador de serie Fibonacci
    - Uso básico de GDB
    - Calculadora simple

ETAPA 3: Punteros, Arreglos y Gestión de Memoria
- Objetivo: Dominar punteros, arreglos, estructuras y memoria dinámica.

Habilidades:
    - Punteros, arreglos, aritmética de punteros
    - Structs, typedef
    - Asignación dinámica de memoria (malloc, free)
    - Conceptos de l-value y r-value

Recursos:
    - C Programming: A Modern Approach (K.N. King)
    - Understanding and Using C Pointers (Richard Reese)
    - C Primer Plus (Stephen Prata)
    - Tutorial: Pointers and Arrays in C (cprogramming.com)
    - Ejercicios: Exercism C Track (gratuito), LeetCode (gratuito)
    - Videos de Jacob Sorber sobre punteros (YouTube)

Proyectos:
    - Lista enlazada simple
    - Gestor de contactos con memoria dinámica
    - Depuración avanzada de punteros con GDB
    - Arreglo dinámico

ETAPA 4: Proyectos Prácticos y Aplicaciones
- Objetivo: Aplicar los conocimientos en proyectos reales y diseño modular.

Habilidades:
    - Diseño modular, organización del código
    - Manejo de archivos, manipulación de cadenas
    - Bibliotecas estándar (stdio.h, string.h, etc.)
    - Uso de Makefiles y sistemas de construcción

Recursos:
    - Project-Based Learning – C (GitHub, gratuito)
    - Awesome C (GitHub)
    - 21st Century C (Ben Klemens)
    - Build Your Own Command Line Tool in C (YouTube)
    - Makefiles y Build Automation (YouTube: freeCodeCamp)
    - Tutoriales de C en GeeksforGeeks

Proyectos:
    - Conversor de unidades
    - Contador de palabras
    - Intérprete básico de línea de comandos
    - Herramienta de cifrado/descifrado
    - Editor de texto simple

ETAPA 5: Estructuras de Datos y Algoritmos
- Objetivo: Implementar estructuras clásicas y algoritmos eficientes en C.

Habilidades:
    - Listas, pilas, colas, árboles, grafos
    - Recursión
    - Análisis algorítmico (Big-O)
    - Algoritmos de ordenamiento y búsqueda

Recursos:
    - Algorithms in C (Robert Sedgewick)
    - Data Structures Using C (Reema Thareja)
    - Problem Solving and Program Design in C (Hanly, Koffman)
    - Introduction to Algorithms (Cormen et al.)
    - Retos gratuitos: HackerRank, LeetCode, CodeSignal
    - Videos de Neso Academy: Estructuras de Datos en C

Proyectos:
    - Pila y cola (arreglo y lista enlazada)
    - Árbol binario con inserción y búsqueda
    - Recorridos de grafos (BFS, DFS)
    - Algoritmos de ordenamiento (burbuja, inserción, quicksort, mergesort)
    - Tabla hash básica

ETAPA 6: Temas Avanzados, Sistemas Operativos y Embebidos
- Objetivo: Optimizar código, depurar a fondo y desarrollar para sistemas operativos y hardware.

Habilidades:
    - Optimización y perfilado (Valgrind, GDB)
    - Programación de bajo nivel y manejo de memoria
    - Buenas prácticas de código seguro y mantenible
    - Programación embebida (microcontroladores, bare metal)
    - Conceptos de sistemas operativos (procesos, hilos, drivers)
    - Concurrencia y sincronización

Recursos:
    - Expert C Programming: Deep C Secrets (Peter van der Linden)
    - Computer Systems: A Programmer’s Perspective (Bryant y O’Hallaron)
    - Operating Systems: Three Easy Pieces (gratuito en OSTEP)
    - Tutoriales gratuitos de Arduino, STM32, ESP32
    - Linux System Programming (Robert Love)
    - Advanced Programming in the UNIX Environment (W. Richard Stevens)
    - Videos: Valgrind Tutorial, Bare Metal Programming (YouTube)
    - Curso gratuito: Build Your Own OS (GitHub)

Proyectos:
    - Juego de consola (Snake, Tetris)
    - Bootloader simple en C
    - Programación en microcontroladores (Arduino, STM32, ESP32)
    - Controlador de dispositivo básico
    - Servidor HTTP en C
    - Registrador de datos en tiempo real
    - Servidor de archivos multihilo
    - Implementar un asignador de memoria

COMUNIDAD Y EXTRAS
- Foros: Reddit r/C_Programming, Stack Overflow, EmbeddedRelated.com
- Documentar aprendizaje: GitHub, Dev.to
- Retos de código y open source
- Analizar código abierto: Linux kernel, Redis, SQLite
- Conferencias: Embedded World, Linux Foundation
- Boletines: C Weekly, Embedded.com
